				;file C:\Users\L0614\Desktop\Holtek\Holtek-HT66F70A-LCD\holtek_lcd\holtek_lcd\holtek_lcd.c
				;1	/*#include "HT66F50.h"
				;2	#define LCD_EN			_pe0
				;3	#define LCD_ENC			_pec0
				;4	#define LCD_RS			_pe1
				;5	#define LCD_RSC			_pec1
				;6	
				;7	#define LCD_DataPort	_pd
				;8	#define LCD_DataPortC	_pdc
				;9	void LCD_CMD(unsigned short lcmd);
				;10	void LCD_Init(void);
				;11	void LCD_WRITE(unsigned short data);
				;12	void main()
				;13	{
				;14		LCD_Init();
				;15		LCD_CMD(0x80);
				;16		LCD_WRITE(0x31);
				;17		while(1)
				;18		{
				;19			LCD_CMD(0x80);
				;20			LCD_WRITE(0x31);
				;21			GCC_DELAY(100000);
				;22			LCD_CMD(0xC0);
				;23			LCD_WRITE(0x32);
				;24			GCC_DELAY(100000);
				;25		}
				;26	}
				;27	
				;28	void LCD_CMD(unsigned short cmd)
				;29	{
				;30		LCD_RS = 0;
				;31		LCD_DataPort = cmd;
				;32		LCD_EN = 1;
				;33		GCC_DELAY(40);
				;34		LCD_EN = 0;
				;35		GCC_DELAY(40);
				;36		cmd <<= 4;
				;37		LCD_DataPort = cmd;
				;38		GCC_DELAY(40);
				;39		LCD_EN = 0;
				;40		GCC_DELAY(40);
				;41	}
				;42	void LCD_Init(void)
				;43	{
				;44		LCD_RS = 0;
				;45		LCD_EN = 0;
				;46		LCD_RSC = 0;
				;47		LCD_ENC = 0;
				;48		LCD_DataPortC = 0;
				;49		GCC_DELAY(50000);
				;50		LCD_CMD(0x28);
				;51		LCD_CMD(0x0F);
				;52		LCD_CMD(0x06);
				;53		LCD_CMD(0x01);
				;54		GCC_DELAY(100000);
				;55	}
				;56	void LCD_WRITE(unsigned short data)
				;57	{
				;58		LCD_RS = 1;
				;59		LCD_DataPort = data;
				;60		LCD_EN = 1;
				;61		GCC_DELAY(40);
				;62		LCD_EN = 0;
				;63		GCC_DELAY(40);
				;64		data <<= 4;
				;65		LCD_DataPort = data;
				;66		GCC_DELAY(40);
				;67		LCD_EN = 0;
				;68		GCC_DELAY(40);
				;69	}*/
				;70	// PROGRAM	: 5-6.c										   2011.0522
				;71	// FUNCTION	: 20*2 LCM Contrl Demo Program 		   By Steven
				;72	#include	"HT66F50.h"
				;73	#define LCM_EN			_pe0
				;74	#define LCM_ENC			_pec0
				;75	#define LCM_RS			_pe1
				;76	#define LCM_RSC			_pec1
				;77	#define LCM_RW			_pe2
				;78	#define LCM_RWC			_pec2
				;79	#define LCM_DataPort	_pd
				;80	#define LCM_DataPortC	_pdc
				;81	void LCMInit(void);
				;82	unsigned short LCMWrite(unsigned char, unsigned char);
				;83	void PAUSE(unsigned short);
				;84	void main()
				;85	{	unsigned short i;
				@code .SECTION 'CODE'
				include HT66F50.inc
0000	2801	jmp     _main_startup1
				@start .SECTION 'CODE'
				_main_startup1:
				@start .SECTION 'CODE'
0001	284C	jmp     _main
				;86		LCMInit();				                     //LCM Initialization
				_main:
				_main:
004C	201F	call    _LCMInit
				;87		while(1)
				;88		{	
				;89			LCMWrite(0,0x01);
				_L12:
004D	0F01	mov     a, 1H
004E	4083	mov     CD, a
004F	0F00	mov     a, 0H
0050	2002	call    _LCMWrite
				;90			PAUSE(100);
0051	0F64	mov     a, 64H
0052	4084	mov     i, a
0053	5F05	clr     i[1]
0054	203A	call    _PAUSE
				;91			LCMWrite(0,0x80);						      //Clear LCM Display						
0055	0F80	mov     a, 80H
0056	4083	mov     CD, a
0057	0F00	mov     a, 0H
0058	2002	call    _LCMWrite
0059	5F06	clr     _main_2
				;92			for(i=0;i<16;i++)
0063	4706	mov     a, _main_2
0064	0A10	sub     a, 10H
0065	390A	snz     Z
0066	285A	jmp     _L9
				;93			{	LCMWrite(1,0x31); PAUSE(10);        //Dispay "1"
				_L9:
005A	0F31	mov     a, 31H
005B	4083	mov     CD, a
005C	0F01	mov     a, 1H
005D	2002	call    _LCMWrite
005E	0F0A	mov     a, AH
005F	4084	mov     i, a
0060	5F05	clr     i[1]
0061	203A	call    _PAUSE
0062	5486	inc     _main_2
				;94			}
				;95			LCMWrite(0,0xC0);					         //Set Line 2, Position 0
0067	0FC0	mov     a, C0H
0068	4083	mov     CD, a
0069	0F00	mov     a, 0H
006A	2002	call    _LCMWrite
006B	5F06	clr     _main_2
				;96			for(i=0;i<16;i++) 
0075	4706	mov     a, _main_2
0076	0A10	sub     a, 10H
0077	390A	snz     Z
0078	286C	jmp     _L11
				;97			{	LCMWrite(1,0x32); PAUSE(10);	      //Dispay "2"
				_L11:
006C	0F32	mov     a, 32H
006D	4083	mov     CD, a
006E	0F01	mov     a, 1H
006F	2002	call    _LCMWrite
0070	0F0A	mov     a, AH
0071	4084	mov     i, a
0072	5F05	clr     i[1]
0073	203A	call    _PAUSE
0074	5486	inc     _main_2
				;98			}
				;99			PAUSE(100);  
0079	0F64	mov     a, 64H
007A	4084	mov     i, a
007B	5F05	clr     i[1]
007C	203A	call    _PAUSE
				;100		}
007D	284D	jmp     _L12
007E	287E	jmp     $
				@dummy .SECTION 'CODE'
007F	0000	nop
0080	0000	nop
				L0081:
0081	0000	nop
0082	0000	nop
				L0083:
0083	0000	nop
				L0084:
0084	0000	nop
0085	1785	sdz     ACC
0086	2884	jmp     L0084
				L0087:
0087	0000	nop
0088	1785	sdz     ACC
0089	2887	jmp     L0087
008A	5783	sdz     CD
008B	2887	jmp     L0087
008C	0003	ret
				;101	}
				;102	void LCMInit(void)
				;103	{	LCM_EN=0; LCM_RW=0; LCM_RS=0;	            //Clear EN/RW/RS Pin
				_LCMInit:
				_LCMInit:
001F	3426	clr     PE0
0020	3526	clr     PE2
0021	34A6	clr     PE1
				;104		LCM_ENC=0; LCM_RWC=0; LCM_RSC=0;	         //Config EN/RW/RS O/PAUSE
0022	3427	clr     PEC0
0023	3527	clr     PEC2
0024	34A7	clr     PEC1
				;105		GCC_DELAY(50000);							         //LCM Power-On Time
0025	0F30	mov     a, 30H
0026	4083	mov     CD, a
0027	0FBA	mov     a, BAH
0028	2081	call    L0081
				;106		LCMWrite(0,0x28);							      //COMD:8-Bit, 2-Line, 5*7
0029	0F28	mov     a, 28H
002A	4083	mov     CD, a
002B	0F00	mov     a, 0H
002C	2002	call    _LCMWrite
				;107		LCMWrite(0,0x0F);						         //COMD:Display/Cursor Blinking On
002D	0F0F	mov     a, FH
002E	4083	mov     CD, a
002F	0F00	mov     a, 0H
0030	2002	call    _LCMWrite
				;108		LCMWrite(0,0x06);							      //COMD:Increment, Not Shift
0031	0F06	mov     a, 6H
0032	4083	mov     CD, a
0033	0F00	mov     a, 0H
0034	2002	call    _LCMWrite
				;109		LCMWrite(0,0x01);							      //COMD:Clear LCM Display
0035	0F01	mov     a, 1H
0036	4083	mov     CD, a
0037	0F00	mov     a, 0H
0038	2002	call    _LCMWrite
0039	0003	ret
				;110	}
				;111	unsigned short LCMWrite(unsigned char DCFlag, unsigned char CD)
				;112	{	unsigned short BusyAC;
				_LCMWrite:
				_LCMWrite:
0002	4084	mov     DCFlag[0], a
				;113		LCM_DataPortC=0;								   //Config Port as O/P Mode
0003	1F24	clr     PDC
				;114		LCM_RW=0;										   //RW=0 (Write)
0004	3526	clr     PE2
				;115		LCM_RS=DCFlag;									   //Set RS State By DCFlag
0005	4704	mov     a, DCFlag[0]
0006	0E01	and     a, 1H
0007	4080	mov     ra, a
0008	4700	mov     a, ra
0009	4380	addm    a, ra
000A	34A6	clr     PE1
000B	4700	mov     a, ra
000C	05A6	orm     a, PE
				;116		LCM_DataPort=CD;								   //Sent Command or Data
000D	4703	mov     a, CD[0]
000E	00A3	mov     PD, a
				;117		LCM_EN=1; _nop(); LCM_EN=0;			      //EN=1
000F	3026	set     PE0
0010	0000	nop
0011	3426	clr     PE0
				;118		LCM_DataPort= CD << 4;								   //Sent Command or Data
0012	4703	mov     a, CD[0]
0013	4080	mov     ra, a
0014	5100	swapa   ra
0015	0EF0	and     a, F0H
0016	4080	mov     ra, a
0017	4700	mov     a, ra
0018	00A3	mov     PD, a
				;119		LCM_EN=1; _nop(); LCM_EN=0;			      //EN=1
0019	3026	set     PE0
001A	0000	nop
001B	3426	clr     PE0
				;120		return BusyAC;	
				;121	}
001C	5F00	clr     ra
001D	5F01	clr     rb
001E	0003	ret
				;122	void PAUSE(unsigned short i)						
				;123	{	unsigned short j;
				;124		for (j=0;j<i;j++) GCC_DELAY(10000);				//Delay i*10mS 
				_PAUSE:
				_PAUSE:
003A	5F01	clr     rb
003B	5F02	clr     rc
003C	2844	jmp     _L4
				_L5:
003D	0F09	mov     a, 9H
003E	4083	mov     CD, a
003F	0FBE	mov     a, BEH
0040	2083	call    L0083
0041	5481	inc     rb
0042	3D0A	sz      Z
0043	5482	inc     rc
				_L4:
0044	4701	mov     a, rb
0045	4404	xor     a, i[0]
0046	4702	mov     a, rc
0047	3D0A	sz      Z
0048	4405	xor     a, i[1]
0049	390A	snz     Z
004A	283D	jmp     _L5
004B	0003	ret
				;125	}
				data .SECTION 'DATA'
				__pd DB DUP (?) ; __pd
				__pdc DB DUP (?) ; __pdc
				__pe DB DUP (?) ; __pe
				__pec DB DUP (?) ; __pec
				ra DB DUP (?)
				rb DB DUP (?)
				rc DB DUP (?)
				CD DB DUP (?) ; CD
				i DB 2 DUP (?) ; i
				_main_2 DB DUP (?)
