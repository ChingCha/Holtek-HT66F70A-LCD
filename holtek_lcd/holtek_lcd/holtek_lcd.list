				;file C:\Users\L0614\Desktop\Holtek\Holtek-HT66F70A-LCD\holtek_lcd\holtek_lcd\holtek_lcd.c
				;1	#include	"HT66F50.h"
				;2	#include <string.h>
				;3	#define LCD_EN			_pe0
				;4	#define LCD_ENC			_pec0
				;5	#define LCD_RS			_pe1
				;6	#define LCD_RSC			_pec1
				;7	#define LCD_RW			_pe2
				;8	#define LCD_RWC			_pec2
				;9	#define LCD_DataPort	_pd
				;10	#define LCD_DataPortC	_pdc
				;11	void LCD_Init(void);
				;12	unsigned short LCD_Write(unsigned char, unsigned char);
				;13	void PAUSE(unsigned short);
				;14	static void Str_To_Lcd(char *pData, unsigned int count);
				;15	void Lcd_Write_String(unsigned int line, unsigned int col, char *pText);
				;16	void Lcd_Clear(void);
				;17	void Lcd_Write_Char(unsigned int line, unsigned int col, char Text);
				;18	void main()
				;19	{	unsigned short i;
				@code .SECTION 'CODE'
				include HT66F50.inc
0000	2801	jmp     _main_startup1
				@start .SECTION 'CODE'
				_main_startup1:
				@start .SECTION 'CODE'
0001	28A8	jmp     _main
0002	0053	jmp     L0053
				;20		LCD_Init();				                     //LCM Initialization
				_main:
				_main:
00A8	201E	call    _LCD_Init
				;21		while(1)
				;22		{	
				;23			Lcd_Clear();
				_L24:
00A9	208B	call    _Lcd_Clear
				;24			PAUSE(100);
00AA	0F64	mov     a, 64H
00AB	4086	mov     i, a
00AC	5F07	clr     line
00AD	2057	call    _PAUSE
				;25			char c = 'K';					
				;26			for(i=0;i<16;i++)
00AE	5F15	clr     _main_2
00AF	5F16	clr     _main_2[1]
00C0	5495	inc     _main_2
00C1	3D0A	sz      Z
00C2	5496	inc     _main_2[1]
00C3	4715	mov     a, _main_2
00C4	0C10	xor     a, 10H
00C5	4516	or      a, _main_2[1]
00C6	390A	snz     Z
00C7	28B0	jmp     _L21
00C8	5F15	clr     _main_2
00C9	5F16	clr     _main_2[1]
				;27			{	Lcd_Write_String(1,i,"S"); PAUSE(10);        //Dispay "1"
				_L21:
00B0	0F04	mov     a, 4H
00B1	4093	mov     pText, a
00B2	0F80	mov     a, 80H
00B3	4094	mov     pText[1], a
00B4	4715	mov     a, _main_2
00B5	4091	mov     col, a
00B6	4716	mov     a, _main_2[1]
00B7	4092	mov     col[1], a
00B8	0F01	mov     a, 1H
00B9	408F	mov     line, a
00BA	5F10	clr     line[1]
00BB	2069	call    _Lcd_Write_String
00BC	0F0A	mov     a, AH
00BD	4086	mov     i, a
00BE	5F07	clr     line
00BF	2057	call    _PAUSE
				;28			}
				;29			for(i=0;i<16;i++) 
00D8	5495	inc     _main_2
00D9	3D0A	sz      Z
00DA	5496	inc     _main_2[1]
00DB	4715	mov     a, _main_2
00DC	0C10	xor     a, 10H
00DD	4516	or      a, _main_2[1]
00DE	390A	snz     Z
00DF	28CA	jmp     _L23
				;30			{	Lcd_Write_Char(2,i,c); PAUSE(10);	      //Dispay "2"
				_L23:
00CA	0F4B	mov     a, 4BH
00CB	408B	mov     Text, a
00CC	4715	mov     a, _main_2
00CD	4089	mov     col, a
00CE	4716	mov     a, _main_2[1]
00CF	408A	mov     col[1], a
00D0	0F02	mov     a, 2H
00D1	4087	mov     line, a
00D2	5F08	clr     line[1]
00D3	2090	call    _Lcd_Write_Char
00D4	0F0A	mov     a, AH
00D5	4086	mov     i, a
00D6	5F07	clr     line
00D7	2057	call    _PAUSE
				;31			}
				;32			PAUSE(100);  
00E0	0F64	mov     a, 64H
00E1	4086	mov     i, a
00E2	5F07	clr     line
00E3	2057	call    _PAUSE
				;33		}
00E4	28A9	jmp     _L24
00E5	28E5	jmp     $
				@dummy .SECTION 'CODE'
00E6	0000	nop
00E7	0000	nop
				L00E8:
00E8	0000	nop
00E9	0000	nop
				L00EA:
00EA	0000	nop
				L00EB:
00EB	0000	nop
00EC	1785	sdz     ACC
00ED	28EB	jmp     L00EB
				L00EE:
00EE	0000	nop
00EF	1785	sdz     ACC
00F0	28EE	jmp     L00EE
00F1	5785	sdz     CD
00F2	28EE	jmp     L00EE
00F3	0003	ret
				L00F4:
00F4	4705	mov     a, CD
00F5	4081	mov     rb, a
00F6	4706	mov     a, i
00F7	4082	mov     rc, a
				L00F8:
00F8	4701	mov     a, rb
00F9	0083	mov     MP1, a
00FA	4702	mov     a, rc
00FB	0081	mov     MP0, a
00FC	2113	call    L0113
00FD	4080	mov     ra, a
00FE	5481	inc     rb
00FF	3D0A	sz      Z
0100	5482	inc     rc
0101	5080	sz      ra
0102	28F8	jmp     L00F8
0103	4705	mov     a, CD
0104	4083	mov     rd, a
0105	4706	mov     a, i
0106	4084	mov     re, a
0107	4183	cpl     rd
0108	4184	cpl     re
0109	4703	mov     a, rd
010A	4381	addm    a, rb
010B	4704	mov     a, re
010C	5382	adcm    a, rc
010D	4701	mov     a, rb
010E	4080	mov     ra, a
010F	4702	mov     a, rc
0110	4081	mov     rb, a
0111	0003	ret
0112	1483	inc     MP1
				L0113:
0113	3F81	sz      MP0.7
0114	2919	jmp     L0119
0115	0701	mov     a, MP0
0116	0084	mov     BP, a
0117	0702	mov     a, [02H]
0118	0003	ret
				L0119:
0119	1B01	rrca    MP0
011A	0E3F	and     a, 3FH
011B	0089	mov     TBHP, a
011C	1B03	rrca    MP1
011D	0087	mov     TBLP, a
011E	1D05	tabrd   ACC
011F	3C0A	sz      C
0120	0708	mov     a, TBLH
0121	0003	ret
				;34	}
				;35	void LCD_Init(void)
				;36	{	LCD_EN=0; LCD_RW=0; LCD_RS=0;	            //Clear EN/RW/RS Pin
				_LCD_Init:
				_LCD_Init:
001E	3426	clr     PE0
001F	3526	clr     PE2
0020	34A6	clr     PE1
				;37		LCD_ENC=0; LCD_RWC=0; LCD_RSC=0;	         //Config EN/RW/RS O/PAUSE
0021	3427	clr     PEC0
0022	3527	clr     PEC2
0023	34A7	clr     PEC1
				;38		GCC_DELAY(50000);							         //LCM Power-On Time
0024	0F30	mov     a, 30H
0025	4085	mov     CD, a
0026	0FBA	mov     a, BAH
0027	20E8	call    L00E8
				;39		LCD_Write(0,0x28);
0028	0F28	mov     a, 28H
0029	4085	mov     CD, a
002A	0F00	mov     a, 0H
002B	2003	call    _LCD_Write
				;40		LCD_Write(0,0x08);						         //COMD:Display/Cursor Blinking On
002C	0F08	mov     a, 8H
002D	4085	mov     CD, a
002E	0F00	mov     a, 0H
002F	2003	call    _LCD_Write
				;41		LCD_Write(0,0x06);							      //COMD:Increment, Not Shift
0030	0F06	mov     a, 6H
0031	4085	mov     CD, a
0032	0F00	mov     a, 0H
0033	2003	call    _LCD_Write
				;42		LCD_Write(0,0x01);							      //COMD:Clear LCM Display
0034	0F01	mov     a, 1H
0035	4085	mov     CD, a
0036	0F00	mov     a, 0H
0037	2003	call    _LCD_Write
0038	0003	ret
				;43	}
				;44	unsigned short LCD_Write(unsigned char DCFlag, unsigned char CD)
				;45	{	
				_LCD_Write:
				_LCD_Write:
0003	4086	mov     DCFlag[0], a
				;46		LCD_DataPortC=0;								   //Config Port as O/P Mode
0004	1F24	clr     PDC
				;47		LCD_RW=0;										   //RW=0 (Write)
0005	3526	clr     PE2
				;48		LCD_RS=DCFlag;									   //Set RS State By DCFlag
0006	4706	mov     a, DCFlag[0]
0007	0E01	and     a, 1H
0008	4080	mov     ra, a
0009	4700	mov     a, ra
000A	4380	addm    a, ra
000B	34A6	clr     PE1
000C	4700	mov     a, ra
000D	05A6	orm     a, PE
				;49		LCD_DataPort=CD;								   //Sent Command or Data
000E	4705	mov     a, CD[0]
000F	00A3	mov     PD, a
				;50		LCD_EN=1; _nop(); LCD_EN=0;			      //EN=1
0010	3026	set     PE0
0011	0000	nop
0012	3426	clr     PE0
				;51		LCD_DataPort= CD << 4;								   //Sent Command or Data
0013	4705	mov     a, CD[0]
0014	4080	mov     ra, a
0015	5100	swapa   ra
0016	0EF0	and     a, F0H
0017	4080	mov     ra, a
0018	4700	mov     a, ra
0019	00A3	mov     PD, a
				;52		LCD_EN=1; _nop(); LCD_EN=0;			      //EN=1	
001A	3026	set     PE0
001B	0000	nop
001C	3426	clr     PE0
001D	0003	ret
				;53	}
				;54	void PAUSE(unsigned short i)						
				;55	{	unsigned short j;
				;56		for (j=0;j<i;j++) GCC_DELAY(10000);				//Delay i*10mS 
				_PAUSE:
				_PAUSE:
0057	5F01	clr     rb
0058	5F02	clr     rc
0059	2861	jmp     _L8
				_L9:
005A	0F09	mov     a, 9H
005B	4085	mov     CD, a
005C	0FBE	mov     a, BEH
005D	20EA	call    L00EA
005E	5481	inc     rb
005F	3D0A	sz      Z
0060	5482	inc     rc
				_L8:
0061	4701	mov     a, rb
0062	4406	xor     a, i[0]
0063	4702	mov     a, rc
0064	3D0A	sz      Z
0065	4407	xor     a, i[1]
0066	390A	snz     Z
0067	285A	jmp     _L9
0068	0003	ret
				;57	}
				;58	
				;59	static void Str_To_Lcd(char *pData, unsigned int count)
				;60	{
				_Str_To_Lcd:
				_Str_To_Lcd:
0039	4707	mov     a, pData[0]
003A	408B	mov     Text, a
003B	4708	mov     a, pData[1]
003C	408C	mov     Text[1], a
003D	4709	mov     a, count[0]
003E	430B	add     a, Text
003F	408D	mov     Text[2], a
0040	470A	mov     a, count[1]
0041	530C	adc     a, Text[1]
0042	408E	mov     Text[3], a
				;61	    while (count--)
0043	284F	jmp     _L4
				_L4:
004F	470B	mov     a, Text
0050	440D	xor     a, Text[2]
0051	470C	mov     a, Text[1]
0052	3D0A	sz      Z
				L0053:
0053	440E	xor     a, Text[3]
0054	390A	snz     Z
0055	2844	jmp     _L5
0056	0003	ret
				;62	    {
				;63	        LCD_Write(1,*(pData++));
				_L5:
0044	470B	mov     a, Text
0045	0083	mov     MP1, a
0046	470C	mov     a, Text[1]
0047	0081	mov     MP0, a
0048	2113	call    L0113
0049	4085	mov     CD, a
004A	0F01	mov     a, 1H
004B	2003	call    _LCD_Write
004C	548B	inc     Text
004D	3D0A	sz      Z
004E	548C	inc     Text[1]
				;64	    }
				;65	}
				;66	void Lcd_Write_String(unsigned int line, unsigned int col, char *pText)
				;67	{
				;68		if(line == 1) 	LCD_Write(0,0x80 + col);
				_Lcd_Write_String:
				_Lcd_Write_String:
0069	470F	mov     a, line[0]
006A	0C01	xor     a, 1H
006B	4510	or      a, line[1]
006C	390A	snz     Z
006D	2872	jmp     _L11
006E	4711	mov     a, col[0]
006F	0B80	add     a, 80H
0070	4085	mov     CD, a
0071	287A	jmp     _L13
				;69		if(line == 2) 	LCD_Write(0,0xC0 + col);
				_L11:
0072	470F	mov     a, line[0]
0073	0C02	xor     a, 2H
0074	4510	or      a, line[1]
0075	390A	snz     Z
0076	287C	jmp     _L12
0077	4711	mov     a, col[0]
0078	0BC0	add     a, C0H
0079	4085	mov     CD, a
				_L13:
007A	0F00	mov     a, 0H
007B	2003	call    _LCD_Write
				;70		Str_To_Lcd(pText, strlen(pText));
				_L12:
007C	4713	mov     a, pText[0]
007D	4085	mov     CD, a
007E	4714	mov     a, pText[1]
007F	4086	mov     i, a
0080	20F4	call    L00F4
0081	4700	mov     a, ra
0082	4089	mov     col, a
0083	4701	mov     a, rb
0084	408A	mov     col[1], a
0085	4713	mov     a, pText[0]
0086	4087	mov     line, a
0087	4714	mov     a, pText[1]
0088	4088	mov     line[1], a
0089	2039	call    _Str_To_Lcd
008A	0003	ret
				;71	}
				;72	void Lcd_Clear(void)
				;73	{
				;74		LCD_Write(0,0x01);
				_Lcd_Clear:
				_Lcd_Clear:
008B	0F01	mov     a, 1H
008C	4085	mov     CD, a
008D	0F00	mov     a, 0H
008E	2003	call    _LCD_Write
008F	0003	ret
				;75	}
				;76	void Lcd_Write_Char(unsigned int line, unsigned int col, char Text)
				;77	{
				;78		if(line == 1) 	LCD_Write(0,0x80 + col);
				_Lcd_Write_Char:
				_Lcd_Write_Char:
0090	4707	mov     a, line[0]
0091	0C01	xor     a, 1H
0092	4508	or      a, line[1]
0093	390A	snz     Z
0094	2899	jmp     _L16
0095	4709	mov     a, col[0]
0096	0B80	add     a, 80H
0097	4085	mov     CD, a
0098	28A1	jmp     _L18
				;79		if(line == 2) 	LCD_Write(0,0xC0 + col);
				_L16:
0099	4707	mov     a, line[0]
009A	0C02	xor     a, 2H
009B	4508	or      a, line[1]
009C	390A	snz     Z
009D	28A3	jmp     _L17
009E	4709	mov     a, col[0]
009F	0BC0	add     a, C0H
00A0	4085	mov     CD, a
				_L18:
00A1	0F00	mov     a, 0H
00A2	2003	call    _LCD_Write
				;80		LCD_Write(1,Text);
				_L17:
00A3	470B	mov     a, Text[0]
00A4	4085	mov     CD, a
00A5	0F01	mov     a, 1H
00A6	2003	call    _LCD_Write
00A7	0003	ret
				;81	}
				data .SECTION 'DATA'
				__pd DB DUP (?) ; __pd
				__pdc DB DUP (?) ; __pdc
				__pe DB DUP (?) ; __pe
				__pec DB DUP (?) ; __pec
				ra DB DUP (?)
				rb DB DUP (?)
				rc DB DUP (?)
				rd DB DUP (?)
				re DB DUP (?)
				CD DB DUP (?) ; CD
				i DB 2 DUP (?) ; i
				line DB 2 DUP (?) ; line
				col DB 2 DUP (?) ; col
				Text DB DUP (?) ; Text
				line DB 2 DUP (?) ; line
				col DB 2 DUP (?) ; col
				pText DB DUP (?) ; pText
				_main_2 DB DUP (?)
